//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Character/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Trigger"",
            ""id"": ""426e46d5-7f16-4740-aa1d-34982043c0e3"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d449dda3-b82f-40ef-b292-a42fb1127fbb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fdb5e379-db9a-4fe4-83ce-01a93eefc87c"",
                    ""path"": ""<HID::Arduino LLC Arduino Leonardo>/z"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Trigger
        m_Trigger = asset.FindActionMap("Trigger", throwIfNotFound: true);
        m_Trigger_Move = m_Trigger.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Trigger
    private readonly InputActionMap m_Trigger;
    private List<ITriggerActions> m_TriggerActionsCallbackInterfaces = new List<ITriggerActions>();
    private readonly InputAction m_Trigger_Move;
    public struct TriggerActions
    {
        private @PlayerControls m_Wrapper;
        public TriggerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Trigger_Move;
        public InputActionMap Get() { return m_Wrapper.m_Trigger; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TriggerActions set) { return set.Get(); }
        public void AddCallbacks(ITriggerActions instance)
        {
            if (instance == null || m_Wrapper.m_TriggerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TriggerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(ITriggerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(ITriggerActions instance)
        {
            if (m_Wrapper.m_TriggerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITriggerActions instance)
        {
            foreach (var item in m_Wrapper.m_TriggerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TriggerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TriggerActions @Trigger => new TriggerActions(this);
    public interface ITriggerActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
